from aiogram import types, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime

from keyboards import get_main_keyboard, get_cancel_keyboard, get_date_keyboard
from models import P2PTransaction
from config import logger

class TransactionStates(StatesGroup):
    waiting_for_amount = State()
    waiting_for_date = State()

async def register_handlers(dp, db_session):
    
    @dp.message(CommandStart())
    async def send_welcome(message: types.Message):
        keyboard = get_main_keyboard()
        await message.reply(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–∏ P2P —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ Bybit.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=keyboard
        )

    @dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    async def show_statistics(message: types.Message):
        user_id = message.from_user.id
        
        # Get all transactions for the user
        buys = db_session.query(P2PTransaction).filter_by(
            user_id=user_id,
            transaction_type='buy'
        ).order_by(P2PTransaction.date.desc()).all()
        
        sells = db_session.query(P2PTransaction).filter_by(
            user_id=user_id,
            transaction_type='sell'
        ).order_by(P2PTransaction.date.desc()).all()
        
        total_bought = sum(t.amount for t in buys)
        total_sold = sum(t.amount for t in sells)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = [
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–∏—Ö P2P —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:\n",
            f"üí∞ –í—Å–µ–≥–æ –≤–Ω–µ—Å–µ–Ω–æ: {total_bought:,.2f} ‚ÇΩ",
            f"üìà –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: {len(buys)}",
            f"üí∏ –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ: {total_sold:,.2f} ‚ÇΩ",
            f"üìâ –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂: {len(sells)}\n"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π
        if buys:
            stats.append("\nüîµ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:")
            for t in buys[:5]:
                stats.append(f"‚Ä¢ {t.date.strftime('%d.%m.%Y')}: {t.amount:,.2f} ‚ÇΩ")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø—Ä–æ–¥–∞–∂
        if sells:
            stats.append("\nüî¥ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏:")
            for t in sells[:5]:
                stats.append(f"‚Ä¢ {t.date.strftime('%d.%m.%Y')}: {t.amount:,.2f} ‚ÇΩ")
        
        keyboard = get_main_keyboard()
        await message.reply("\n".join(stats), reply_markup=keyboard)

    @dp.message(F.text == "üí∞ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ")
    async def start_add_deposit(message: types.Message, state: FSMContext):
        await state.set_state(TransactionStates.waiting_for_amount)
        await state.update_data(transaction_type='buy')
        keyboard = get_cancel_keyboard()
        await message.reply(
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö:",
            reply_markup=keyboard
        )

    @dp.message(F.text == "üí∏ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É")
    async def start_add_sell(message: types.Message, state: FSMContext):
        await state.set_state(TransactionStates.waiting_for_amount)
        await state.update_data(transaction_type='sell')
        keyboard = get_cancel_keyboard()
        await message.reply(
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–æ–¥–∞–∂–∏ –≤ —Ä—É–±–ª—è—Ö:",
            reply_markup=keyboard
        )

    @dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
    async def cancel_operation(message: types.Message, state: FSMContext):
        current_state = await state.get_state()
        if current_state is not None:
            await state.clear()
        keyboard = get_main_keyboard()
        await message.reply(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=keyboard
        )

    @dp.message(TransactionStates.waiting_for_amount)
    async def process_amount(message: types.Message, state: FSMContext):
        try:
            amount = float(message.text.replace(',', '.'))
            if amount <= 0:
                raise ValueError("Amount must be positive")
            
            # Save amount to state and ask for date
            await state.update_data(amount=amount)
            await state.set_state(TransactionStates.waiting_for_date)
            
            keyboard = get_date_keyboard()
            await message.reply(
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.02.2024)\n"
                "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã:",
                reply_markup=keyboard
            )
            
        except ValueError:
            keyboard = get_cancel_keyboard()
            await message.reply(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.",
                reply_markup=keyboard
            )

    @dp.message(TransactionStates.waiting_for_date)
    async def process_date(message: types.Message, state: FSMContext):
        try:
            # Get saved data
            state_data = await state.get_data()
            amount = state_data.get('amount')
            transaction_type = state_data.get('transaction_type')
            
            # Parse date or use current date if button clicked
            text = message.text.strip() if message.text else ""
            if text == "üìÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É":
                date = datetime.now()
            else:
                try:
                    date = datetime.strptime(text, "%d.%m.%Y")
                except ValueError:
                    await message.reply(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.02.2024)\n"
                        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã",
                        reply_markup=get_date_keyboard()
                    )
                    return
            
            # Create and save transaction
            transaction = P2PTransaction(
                user_id=message.from_user.id,
                amount=amount,
                transaction_type=transaction_type,
                date=date
            )
            db_session.add(transaction)
            db_session.commit()
            
            await state.clear()
            
            action_type = "–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" if transaction_type == 'buy' else "–ø—Ä–æ–¥–∞–∂–∞"
            keyboard = get_main_keyboard()
            await message.reply(
                f"‚úÖ {action_type.capitalize()} –Ω–∞ —Å—É–º–º—É {amount:,.2f} ‚ÇΩ "
                f"–æ—Ç {date.strftime('%d.%m.%Y')} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"Error processing date: {e}")
            keyboard = get_main_keyboard()
            await message.reply(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=keyboard
            )
            await state.clear() 